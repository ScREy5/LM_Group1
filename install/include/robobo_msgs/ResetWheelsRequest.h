// Generated by gencpp from file robobo_msgs/ResetWheelsRequest.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_RESETWHEELSREQUEST_H
#define ROBOBO_MSGS_MESSAGE_RESETWHEELSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robobo_msgs
{
template <class ContainerAllocator>
struct ResetWheelsRequest_
{
  typedef ResetWheelsRequest_<ContainerAllocator> Type;

  ResetWheelsRequest_()
    {
    }
  ResetWheelsRequest_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef boost::shared_ptr< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetWheelsRequest_

typedef ::robobo_msgs::ResetWheelsRequest_<std::allocator<void> > ResetWheelsRequest;

typedef boost::shared_ptr< ::robobo_msgs::ResetWheelsRequest > ResetWheelsRequestPtr;
typedef boost::shared_ptr< ::robobo_msgs::ResetWheelsRequest const> ResetWheelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/ResetWheelsRequest";
  }

  static const char* value(const ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
;
  }

  static const char* value(const ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetWheelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::robobo_msgs::ResetWheelsRequest_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_RESETWHEELSREQUEST_H
